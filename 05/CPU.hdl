// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=AorC);
    
    // A Register
    Not(in=instruction[15], out=aInst);
    Or(a=aInst, b=instruction[5], out=loadA);
    ARegister(in=AorC, load=loadA, out=AOut, out[0]=jmp0, out[1]=jmp1, out[2]=jmp2, 
    out[0..14]=addressM);

    Mux16(a=AOut, b=inM, sel=instruction[12], out=ALUy);
    //ALU
    ALU(x=ALUx, y=ALUy,  zx=instruction[11], 
        nx=instruction[10], // zero the x input?
        zy=instruction[9], // zero the y input?
        ny=instruction[8], // negate the y input?
        f=instruction[7],  // compute out = x + y (if 1) or x & y (if 0)
        no=instruction[6], // negate the out output?, 
        out=ALUOut, zr=zero, ng=negative);
    
    // Write M
    And(a=instruction[15], b=instruction[3], out=writeM, out=shouldwrite);
    Mux16(a=false, b=ALUOut, sel=shouldwrite, out=outM);
    
    // D Register
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=ALUOut, load=loadD, out=ALUx);
    
    // Determine if no jump, then increase, else set PC=a
    Or(a=zero, b=negative, out=lte);
    Not(in=lte, out=gt);
    And(a=instruction[1], b=zero, out=jeq);
    And(a=instruction[2], b=lte, out=jlt);
    And(a=instruction[2], b=gt, out=jgt);
    Or(a=jeq, b=jlt, out=temp);
    Or(a=temp, b=jgt, out=jmp);
    And(a=jmp, b=instruction[15], out=loadpc);
    Not(in=loadpc, out=incr);
    PC(in=AOut, load=loadpc, inc=incr, reset=reset, out[0..14]=pc);

}